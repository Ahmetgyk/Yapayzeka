# -*- coding: utf-8 -*-
"""ÖzetMÖ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DKR5DKVoVykh2FxwKX19rB7aoN1uPt0q
"""

import pandas as pd
import numpy as np

data = pd.read_csv("mhr.csv")
data.head()

# Sayıya Döndürür
from sklearn import  preprocessing
le= preprocessing.LabelEncoder()

for C in data.columns:
  data[C] = le.fit_transform(data[C])

data.head()

import seaborn as sns 
import matplotlib.pyplot as plt
from sklearn.metrics import f1_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score

#Grafik Oluşturma
 #Isı Haritası
plt.figure(figsize=(15,10))
sns.heatmap(dataset.corr(),annot=True,linewidths=0.5,cmap="Purples")
 #Keman Grafiği
df_div = pd.melt(dataset, "class", var_name="Characteristics")
fig = plt.subplots(figsize=(20,8))
p = sns.violinplot(x="Characteristics", y="value", hue="class", split = True, data=df_div)
p.set_xticklabels(rotation = 90, labels = list(dataset.columns));

#Sütun çıkartma
dataset.drop(["gill-attachment", "veil-type", "veil-color","cap-color", "odor", "gill-spacing"], axis=1, inplace= True)

#Sütun Çıkarma
def Değişim(isim, eski, yeni):
  for a in dataset.columns:
    if a == isim:
      for sutun in range(0, 8124):       
        if eski == dataset.loc[sutun,a]:
          dataset.loc[sutun,a] = yeni  

Değişim("bruises", 0, 0)

#Grafik Oluşturma
plt.figure(figsize=(15,10))
sns.heatmap(new_data.corr(),annot=True,linewidths=0.5,cmap="Purples")

#Feature Selection
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2

X = data.iloc[:, 1:24]
Y = data.iloc[:, 0]

chi_selector = SelectKBest(chi2, k=10)
fit = chi_selector.fit(X_norm, Y)

#Satır yazdırır
chi_support = fit.get_support()
chi_feature = X.loc[:,chi_support].columns.tolist()
print(chi_feature, 'selected features')

#sütun yazdırı
dfscores = pd.DataFrame(fit.scores_)
dfcolumns = pd.DataFrame(X.columns)

featureScores = pd.concat([dfcolumns,dfscores],axis=1)
featureScores.columns = ['Specs','Score'] 
print(featureScores.nlargest(10,'Score'))

#Feature İmportance Grafiği
from sklearn.ensemble import ExtraTreesClassifier
import matplotlib.pyplot as plt
model = ExtraTreesClassifier()
model.fit(X,Y)
print(model.feature_importances_) 
feat_importances = pd.Series(model.feature_importances_, index=X.columns)
feat_importances.nlargest(10).plot(kind='barh')
plt.show()

#Feature Selection(model kullanımı)
from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import RandomForestClassifier

embeded_rf_selector = SelectFromModel(RandomForestClassifier(n_estimators=100), max_features=10)
embeded_rf_selector.fit(X, Y)

embeded_rf_support = embeded_rf_selector.get_support()
embeded_rf_feature = X.loc[:,embeded_rf_support].columns.tolist()
print(str((embeded_rf_feature)), 'selected features')

#Feature Selection(model kullanımı)
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
rfe_selector = RFE(estimator=LogisticRegression(), n_features_to_select=10, step=10, verbose=5)
rfe_selector.fit(X_norm, Y)
rfe_support = rfe_selector.get_support()
rfe_feature = X.loc[:,rfe_support].columns.tolist()
print((rfe_feature), 'selected features')

X = data[['cap-surface', 'bruises', 'gill-spacing', 'gill-size', 'gill-color', 'stalk-root', 
                  'stalk-surface-above-ring', 'stalk-surface-below-ring', 'ring-type', 'habitat']].values
Y = data.iloc[:, 0].values

scaler = StandardScaler()
X = scaler.fit_transform(X)

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25, random_state = 40)

Algoritmalar = [#Algoritmaları Yaz]

#Algoritma Eğit
def Deney(alg):
  X = new_data
  y = data.iloc[:, 0].values

  scaler = StandardScaler()
  X = scaler.fit_transform(X)

  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)

  algs=alg().fit(X_train,y_train)
  y_pred = algs.predict(X_test)

  algoritma_ismi = alg.__name__
  from sklearn.metrics import f1_score
  print(algoritma_ismi, "SCORE==>", f1_score(y_test, y_pred, average=None))
  print("")

#Döngüyü çalıştırma
  for i in Algoritmalar:
  Deney(i)

#Parametreleri bulma
n_estimators = [int(x) for x in np.linspace(start = 200, stop = 1000, num = 5)]

max_features = ['auto', 'sqrt', 'log2']

max_depth = [int(x) for x in np.linspace(20, 100, num = 5)]
max_depth.append(None)

min_samples_split = [2, 5]

min_samples_leaf = [1, 2]

bootstrap = [True, False]

parameters = {'n_estimators': n_estimators, 'max_features': max_features, 'max_depth': max_depth, 'min_samples_split': min_samples_split,
              'min_samples_leaf': min_samples_leaf, 'bootstrap': bootstrap}

#GridSearch kullanma
from sklearn.model_selection import GridSearchCV

grid_search = GridSearchCV(estimator = RFC,
                           param_grid = parameters,
                           scoring = 'r2',
                           cv = 5,
                           n_jobs = -1) 
grid_search = grid_search.fit(X_train, y_train) 
best_accuracy = grid_search.best_score_
best_parameters = grid_search.best_params_

print(best_parameters)
print(best_accuracy)

#Cross Val Score Kullanımı
from sklearn.model_selection import cross_val_score
cross_val_score(RFC, X_train, y_train, cv=10).mean()

#Yapay Sinir Ağı Örneği

from numpy import exp, array, random, dot, mean, abs
import numpy

Girdi = array([[0, 0, 1], [1, 1, 1], [1, 0, 1]])

GercekSonuc = array([[0, 1, 1]]).T

Aırlık = array([[1.0, 1.0, 1.0]]).T

for tekrar in range(1000):
  hucredegeri = dot(Girdi, Aırlık)
  tahmin = 1 / (1 + exp(-hucredegeri))
  Aırlık = Aırlık * dot(Girdi.T, ((GercekSonuc - tahmin) * tahmin * (1 - tahmin)))
  print(str(numpy.mean(numpy.abs(GercekSonuc - tahmin))))

print(1 / 1 + exp(-(dot(array([1, 0, 0]), Aırlık))))