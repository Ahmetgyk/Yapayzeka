# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xpTvEizJIGTkfY5JJJn2wC8r5NPrxtuZ
"""

import numpy as np
import pandas as pd

dataset = pd.read_csv('mhr.csv')
dataset.head()

from sklearn import  preprocessing
le= preprocessing.LabelEncoder()
for colon in dataset.columns:
  dataset[colon]=le.fit_transform(dataset[colon])
dataset.head()

from sklearn.preprocessing import LabelEncoder
from sklearn.compose import ColumnTransformer

X = dataset.iloc[:, 1:23].values
y = dataset.iloc[:, 0].values

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

import keras
from keras.models import Sequential
from keras.layers import Dense

classifier = Sequential()

classifier.add(Dense(units = 25, kernel_initializer = 'uniform', activation = 'relu', input_dim = 22))
classifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu'))
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

classifier.fit(X_train, y_train, batch_size = 10, epochs = 300, shuffle = True)


y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5) 


from sklearn.metrics import confusion_matrix
from sklearn.metrics import r2_score
cm = confusion_matrix(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(cm)
print(r2)

from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score


def build_classifier():
    classifier = Sequential()
    classifier.add(Dense(units = 25, kernel_initializer = 'uniform', activation = 'relu', input_dim = 22))
    classifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu'))
    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))
    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
    return classifier

classifier = KerasClassifier(build_fn = build_classifier, batch_size = 30, epochs = 300)


accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10, n_jobs = -1)

accuracies.mean()
accuracies.std()
print(accuracies.mean(), accuracies.std())

from sklearn.model_selection import GridSearchCV

def build_classifier(optimizer):
    classifier = Sequential()
    classifier.add(Dense(units = 25, kernel_initializer = 'uniform', activation = 'relu', input_dim = 22))
    classifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu'))
    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))
    classifier.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])
    return classifier

classifier = KerasClassifier(build_fn = build_classifier)

parameters = {'batch_size': [25, 32], 'epochs': [100, 500], 'optimizer': ['adam', 'rmsprop']}

grid_search = GridSearchCV(estimator = classifier, param_grid = parameters, scoring = 'accuracy', cv = 10)

grid_search = grid_search.fit(X_train, y_train)

best_accuracy = grid_search.best_score_  
best_parameters = grid_search.best_params_ 
print("Best Accuracy:{}".format(best_accuracy))
print('Best Parameters:{}'.format(best_parameters))

def create_model():
    classifier = Sequential()
    classifier.add(Dense(units = 25, kernel_initializer = 'uniform', activation = 'relu', input_dim = 22))
    classifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu'))
    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))
    classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
    return classifier

model = KerasClassifier(build_fn=create_model)

batch_size = [10, 20, 40]
epochs = [10, 20, 30]
param_grid = dict(batch_size=batch_size, epochs=epochs)

grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)
grid = grid.fit(X_train, y_train)

best_accuracy = grid.best_score_  
best_parameters = grid.best_params_ 
print("Best Accuracy:{}".format(best_accuracy))
print('Best Parameters:{}'.format(best_parameters))

def create_model(optimizer='adam'):
    classifier = Sequential()
    classifier.add(Dense(units = 25, kernel_initializer = 'uniform', activation = 'relu', input_dim = 22))
    classifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu'))
    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))
    classifier.compile(optimizer = optimizer, loss = 'binary_crossentropy', metrics = ['accuracy'])
    return classifier

model = KerasClassifier(build_fn=create_model, epochs=100, batch_size=10, verbose=0)

optimizer = ['SGD', 'RMSprop', 'Adagrad', 'Adadelta', 'Adam', 'Adamax', 'Nadam']
param_grid = dict(optimizer=optimizer)
grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)
grid = grid.fit(X_train, y_train)

best_accuracy = grid.best_score_  
best_parameters = grid.best_params_ 
print("Best Accuracy:{}".format(best_accuracy))
print('Best Parameters:{}'.format(best_parameters))

#Hata
from keras.optimizers import SGD

def create_model(learn_rate=0.01, momentum=0):
  classifier = Sequential()
  classifier.add(Dense(units = 25, kernel_initializer = 'uniform', activation = 'relu', input_dim = 22))
  classifier.add(Dense(units = 20, kernel_initializer = 'uniform', activation = 'relu'))
  classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

  optimizer = SGD(lr=learn_rate, momentum=momentum)
  classifier.compile(loss='binary_crossentropy', optimizer="adam", metrics = ['accuracy'])
  return classifier

model = KerasClassifier(build_fn=create_model, epochs=100, batch_size=10, verbose=0)

learn_rate = [0.001, 0.01, 0.1]
momentum = [0.0, 0.2, 0.4]
param_grid = dict(learn_rate=learn_rate, momentum=momentum)
grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)
grid = grid.fit(X_train, y_train)

best_accuracy = grid.best_score_  
best_parameters = grid.best_params_ 
print("Best Accuracy:{}".format(best_accuracy))
print('Best Parameters:{}'.format(best_parameters))

def create_model(init_mode='uniform'):
	
    classifier = Sequential()
    classifier.add(Dense(units = 25, kernel_initializer=init_mode, activation = 'relu', input_dim = 22))
    classifier.add(Dense(units = 20, kernel_initializer=init_mode, activation = 'relu'))
    classifier.add(Dense(units = 1, kernel_initializer=init_mode, activation = 'sigmoid'))
    classifier.compile(optimizer = "adam", loss = 'binary_crossentropy', metrics = ['accuracy'])
    return classifier

model = KerasClassifier(build_fn=create_model, epochs=100, batch_size=10, verbose=0)

init_mode = ['uniform', 'lecun_uniform', 'normal', 'zero']
param_grid = dict(init_mode=init_mode)
grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)
grid = grid.fit(X_train, y_train)

best_accuracy = grid.best_score_  
best_parameters = grid.best_params_ 
print("Best Accuracy:{}".format(best_accuracy))
print('Best Parameters:{}'.format(best_parameters))

def create_model(activation='relu'):

    classifier = Sequential()
    classifier.add(Dense(units = 25, kernel_initializer=init_mode, activation = activation, input_dim = 22))
    classifier.add(Dense(units = 20, kernel_initializer=init_mode, activation = activation))
    classifier.add(Dense(units = 1, kernel_initializer=init_mode, activation = 'sigmoid'))
    classifier.compile(optimizer = "adam", loss = 'binary_crossentropy', metrics = ['accuracy'])
    return classifier

model = KerasClassifier(build_fn=create_model, epochs=100, batch_size=10, verbose=0)

activation = ['relu', 'tanh', 'sigmoid', 'linear']
param_grid = dict(activation=activation)
grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)
grid = grid.fit(X_train, y_train)

best_accuracy = grid.best_score_  
best_parameters = grid.best_params_ 
print("Best Accuracy:{}".format(best_accuracy))
print('Best Parameters:{}'.format(best_parameters))

#AnlamadÄ±m
from keras.layers import Dropout

from keras.constraints import maxnorm

def create_model(dropout_rate=0.0, weight_constraint=0):

	model = Sequential()
	model.add(Dense(12, input_dim=8, kernel_initializer='uniform', activation='linear', kernel_constraint=maxnorm(weight_constraint)))
	model.add(Dropout(dropout_rate))
	model.add(Dense(1, kernel_initializer='uniform', activation='sigmoid'))
	# Compile model
	model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
	return model
model = KerasClassifier(build_fn=create_model, epochs=100, batch_size=10, verbose=0)

weight_constraint = [1, 2, 3, 4, 5]
dropout_rate = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
param_grid = dict(dropout_rate=dropout_rate, weight_constraint=weight_constraint)
grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)
grid_result = grid.fit(X, Y)

#Hata
def create_model(neurons=1):
  classifier = Sequential()
  classifier.add(Dense(neurons, kernel_initializer='uniform', activation = 'linear', input_dim = 22))
  classifier.add(Dense(neurons, kernel_initializer='uniform', activation = 'linear'))
  classifier.add(Dense(units = 1, kernel_initializer='uniform', activation = 'sigmoid'))
  classifier.compile(optimizer = "adam", loss = 'binary_crossentropy', metrics = ['accuracy'])
  return classifier

model = KerasClassifier(build_fn=create_model, epochs=100, batch_size=10, verbose=0)

neurons = [15, 20, 25]
param_grid = dict(neurons=neurons)
grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=-1, cv=3)
grid = grid.fit(X_train, y_train)

best_accuracy = grid.best_score_  
best_parameters = grid.best_params_ 
print("Best Accuracy:{}".format(best_accuracy))
print('Best Parameters:{}'.format(best_parameters))